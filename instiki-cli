#!/usr/bin/env perl
# Usage: instiki-cli https://wiki.example.org/instiki/show/Sandbox

use warnings;
use strict;

use HTML::Entities;
use HTTP::Request::Common qw< GET POST >;
use LWP::UserAgent;
use HTTP::Cookies;
use Time::HiRes qw< sleep time stat >;
use File::Slurp;

use constant FILE_WATCH_DELAY => 0.1;
my           $AUTHOR          =  $ENV{INSTIKI_AUTHOR} || "AnonymousCoward";
$|++;

my $ua = LWP::UserAgent->new();
$ua->cookie_jar(HTTP::Cookies->new());
$ua->agent("instiki-cli, see https://github.com/iblech/instiki-cli");

# Return the URL for the appropriate kind of action ("show", "edit", ...)
sub url {
    my ($base, $action) = @_;
    $base =~ s#/show/#/$action/# or die "Not an URL referencing an Instiki \"show\" page: $base\n";
    return $base;
}

# Run JavaScript code (making a little effort to ensure that it can't do I/O
# which however you should NOT rely on, see for instance
# https://github.com/bcoe/sandcastle/issues/31) and return its (DOM) output
sub js {
    my $code = shift;

    my $mock = <<'EOF';
        "use strict";
        delete Error.prepareStackTrace;
        delete Error.captureStackTrace;
        Object.freeze(Error);
        var __emulatedConsole = "";
        var document = {
            documentElement: {
                lastChild: undefined,
                parentNode: {
                    appendChild: function (o) {}
                }
            },
            createElement: function (tag) {
                return {
                    setAttribute: function (k,v) {
                        if(k == "value") {
                            __emulatedConsole = __emulatedConsole + v;
                        }
                    }
                };
            }
        };
EOF

    $code = "$mock\n$code\n__emulatedConsole";
    $code =~ s/(.)/sprintf '%%%02x', ord $1/egs;

    my $js = qq/
        console.log(require("vm").runInNewContext(unescape("$code"), {}));
    /;

    open my $fh, "-|", "node", "-e", "$js" or die $!;
    local $/;

    return scalar <$fh>;
}

# Extract the entry's contents and, if handed an "edit" page, its name and
# the edit key
sub extract {
    my $page = shift;

    $page =~ m#>Edit the page anyway</a># and
        die "Page is locked, aborting.\n";

    $page =~ /<textarea[^>]*>(.*?)<\/textarea>/s or
        die "Couldn't find <textarea> in the fetched page: $page\n";
    my $contents = decode_entities($1);

    $contents =~ s/\015//g;
    $contents .= "\012";
    # We append a final EOL so editors are not confused. Before pushing to the
    # wiki, we will remove it again.

    my $name;
    if($page =~ /<input id="new_name".*?value="([^"]*)"/) {
        $name = decode_entities($1);
    }

    # Hivelogic Enkoder wraps the edit key in multiple layers of "eval".
    # Instead of reverse engineering the algorithm, we simply hand the code to
    # a JavaScript interpreter.
    # http://hivelogic.com/enkoder/
    my $key;
    if($page =~ /(function hivelogic_enkoder.*?hivelogic_enkoder\(\);)/s) {
        chomp($key = js($1));
    }

    return { contents => $contents, name => $name, key => $key };
}

# Fetch a wiki entry
sub fetch { extract($ua->request(GET url(shift, "source"))->as_string()) }

# Update a wiki entry
sub store {
    my ($url, $old_contents, $new_contents) = @_;

    # Check for changes and fetch the edit key
    my $old = extract($ua->request(GET url($url, "edit"))->as_string());
    if($old->{contents} ne $old_contents) {
        print "Contents have changed in the meantime. Aborting... ";
        $ua->request(GET url($url, "cancel_edit"));
        print "done.\n";
        return;
    }

    # Remove the final EOL (which we synthetically added in `extract`)
    $new_contents =~ s/\012$//;

    my $req = POST url($url, "save"), [
        _form_key => $old->{key},
        content   => $new_contents,
        new_name  => $old->{name},
        author    => $AUTHOR,
        announcement => "",  # avoid 501 on the nLab
    ];
    my $resp = $ua->request($req)->as_string();
    $resp =~ /redirected/ or do {
        die "Unexpected server response after saving.\n";
    };

    return 1;
}

# Watch a file for changes
sub watch {
    my $file = shift;

    my $start = time();
    while(1) {
        sleep FILE_WATCH_DELAY;
        my $ftime = (stat $file)[9];
        next unless $ftime;  # if file vanished
        last if $ftime > $start;
    }

    # Wait for the file to settle.
    while(1) {
        sleep FILE_WATCH_DELAY;
        my $ftime = (stat $file)[9];
        next unless $ftime;
        next if time() - $ftime < FILE_WATCH_DELAY;
        last;
    }
}

# Strip all forms of trailing whitespace and all CR's
sub strip {
    my $text = shift;
    $text =~ s/\015//g;
    $text =~ s/[\012 ]*$//;
    return $text;
}


# Check for existence of a JavaScript interpreter
system("node", "-e", "1") == 0 or die "Couldn't fork \"node\" to evaluate JavaScript.\n";
js("document.createElement(3).setAttribute('value',2+2);") =~ /4/ or
    die "Couldn't properly execute a dummy JavaScript program.\n";

my $url  = $ARGV[0] or die "Usage: $0 https://wiki.example.org/instiki/show/Sandbox\n";
my $file = (split /\//, $url)[-1];

my $expected_contents;

print "* Changes will be signed as \"$AUTHOR\".\n";
print "  (Set the INSTIKI_AUTHOR environment variable to change this.)\n\n";

while(1) {
    print "* Fetching $url... ";
    my $old = fetch($url);

    if(defined $expected_contents) {
        # Check that saving the changes worked, modulo trailing whitespace.
        if(strip($old->{contents}) ne strip($expected_contents)) {
            print "* There was some problem saving the changes. Aborting.\n";
            exit 1;
        }
        # No need to update the file in this branch
    } else {
        # In case someone is watching $file to come into existence (for
        # instance, to open an editor as soon as that's the case), we don't
        # want them to have to deal with a partially-written file.
        open my $fh, ">", "$file.partial" or die $!;
        print $fh $old->{contents} or die $!;
        close $fh or die $!;

        rename "$file.partial" => $file or die $!;
    }

    print "done.\n";

    while(1) {
        print "* Waiting for changes, go edit file \"$file\" or abort with ^C...\n";
        watch($file);

        open my $fh, "|-", "diff", "-u", "--", "/dev/stdin", "$file" or die $!;
        print $fh $old->{contents} or die $!;
        my $ret = close $fh or do { die $! if $! };
        # If there were changes, diff returns with a non-zero exit code.
        # In this case close() returns false; but we shouldn't die in that
        # case. (See perldoc -f close.)

        if($ret) {
            print "* File was written to, but didn't change.\n";
            redo;
        }

        print "* Accept (y/n)? ";
        my $ok = <STDIN>;
        last if $ok =~ /y/;
        print "\n";
    }

    print "* Pushing changes... ";
    $expected_contents = read_file($file);
    store($url, $old->{contents}, $expected_contents) or exit 1;
    print "done.\n\n";
}
